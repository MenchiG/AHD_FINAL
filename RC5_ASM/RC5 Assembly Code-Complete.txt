Key generation// initial   R5:a_reg   R6:s_array  R7:b_reg  R8:l_array  R9: control the bits of rotate   
//  R10: i_cnt  R11 j_cnt R12: k_cnt   R13: 104(26*4)  R14:16(4*4)  R15:78

sub  $5,$5,$5                // set all register to initial numbers 
sub  $7,$7,$7
sub  $12,$12,$12
sub  $11,$11,$11
sub  $10,$10,$10
addi $13,$0,0x68
addi $14,$0,0x10
addi $15,$0,0x4e             // finish initial
lw   $6,0x21($10)           //load S[i_cnt] from memory
add  $5,$5,$7               
add  $5,$5,$6               //    a+b+s[]
shl  $5,$5,0x3            //     a_reg <<3
lw   $8,0x89($11)           //load L[j_cnt] from mermory
add  $7,$5,$7                // b_reg=a+b
add  $9,$0,$7                //   R9=a+b
add  $7,$7,$8               //   b_reg a+b+l[]
andi $9,$9.0x1f               //   R9= R9 and 11111
beq  $9,$0,0x3                //check if finish rotate ,  if finish ,R7=R7<<(A+B)
shl  $7,$7,0x1              // b_reg<<1
subi $9,$9,0x1              //  R9=R9-1
beq  $0,$0,0xfffc           //  go to   pc-3 
sw   $5,0x21($10)            // store the result to memory
sw   $7,0x89($11)
addi $10,$10,0x4           // i_cnt =i_cnt +4
bne  $10,$13,0x1         // if not equal ,skip the process that set i_cnt = 0
sub  $10,$10,$10         // set i_cnt = 0
addi $11,$11,0x4         //j_cnt =j_cnt +4
bne  $11,$14,0x1         // if not equal ,skip the process that set j_cnt = 0
sub  $11,$11,$11             // set j_cnt = 0 
addi $12,$12,0x1            //k_cnt =K_cnt + 1 
bne  $12,$15,0xffe9        // if k_cnt not equal to 78, go back to the first step 
-------------------------------------------------------sub R1,R1,R1;   //initializationsub R2,R2,R2;sub R3,R3,R3;sub R4,R4,R4;sub R5,R5,R5;   //initializationsub R6,R6,R6;sub R7,R7,R7;sub R8,R8,R8;sub R9,R9,R9;   //initializationsub R10,R10,R10;sub R11,R11,R11;sub R12,R12,R12;sub R13,R13,R13;   //initializationsub R14,R14,R14;sub R15,R15,R15;sub R16,R16,R16;sub R17,R17,R17;   //initializationsub R19,R19,R19;sub R20,R20,R20;---------------branch T/NT--------------------------------sub R18,R18,R18;  sub R21,R21,R21;lw R18, 17(R0);   //  --enc/dec flag  R18=Mem[17]addi R21, R0,1;   //R21=R0+1=1;beq R18, R21, 36;    //If(R18==R21(1))  jump to dec-------------------enc--load A/B--------------------------lw R1,1(R0);   //R1=Mem[1]|Mem[2]|Mem[3]|Mem[4]--input(plaintext) Alw R2, 5(R0);    //R2==Mem[5]|Mem[6]|Mem[7]|Mem[8] --load input (plaintext) B------------------load s[0]/s[1]----------------------------lw R3, 33(R0);  //R3=Mem4[$0+33]  lw R4, 37(R0);  //R4=Mem5[$0+37]-------------Initialization Add----------------------------add R5,R1,R3;   //R5＝A0=A+s[0]  //A0 update to A1, A2. add R6,R2,R4;   //R6=B0=B+s[1]    --------------Loop-----------------------------------------addi R7,R0,0;  //R10=$0 //R10 stores counter i, i=0addi R7,R7,1;  //i=i+1=1addi R8,R0,12;  //fixed value  R8=12nor R9,R5,R0;   // R9=!R5  R9=!A0=!A1… nor R10,R6,R0;   // R10=!B0=!B1...       and R11,R5,R10;  //R11=A0&!B0and R12,R9,R6;  //R12=!A0&B0or R13,R11,R12; //R13=A0 xor B0, A1 xor B1, A2 xor B2...andi R14, R6, Ox1F;   //get last 5 digit of B0beq R14, R0, 3;    //if (R14==0) PC=43  R14=Ox000B0shl R13, R13, 1;     //R13<<1  pc=40subi R14,R14,1;      //R14=R14-1  B0=B0-1bne R14, R0, -3;     //if(R14!==0) PC=40shl R15,R7,3;   //R15=2*i*4=i*8;lw R16,33(R15);  //R16=Mem4[R15+33]=Mem4[41]  tmp1=S[2]add R5,R13,R16; //R5=R13+tmp1=A1sw R5,9(R0);    //Mem4[9+0]<-R5 cipher text Anor R9, R5,R0; //R9=!R5=!A1and R11,R6,R9;  //R11=R6&R9=B0&!A1and R12,R10,R5;  //R12=!B0&A1or R13,R11,R12;   //R13=B0 xor A1andi R14, R5, Ox1F;   //R14 gets last 5 digit of A1beq R14, R0, 3;    //if (R14==0) PC=3  R14=Ox000A1shl R13, R13, 1;     //R13<<1subi R14,R14,1;      //R14=R14-1  A1=A1-1bne R14, R0, -3;     //if(R14!==0) PC=-3lw R19,37(R15);  // R19=Mem[R15+37]=Mem4[i*2*4＋37]  tmp2add R6,R13,R19;  // R6= B1sw R6,13(R0);    //Mem4[13]<-R10(B1) 13-16 cipher text Bbne R7,R8,-29;  //if(R7!=12) go to i++   35jmp  HAL;Decrpytion:---------------------------------------------------------------------sub R1,R1,R1;   //initialization  36sub R2,R2,R2;sub R3,R3,R3;sub R4,R4,R4;sub R5,R5,R5;   //initializationsub R6,R6,R6;sub R7,R7,R7;sub R8,R8,R8;sub R9,R9,R9;   //initializationsub R10,R10,R10;sub R11,R11,R11;sub R12,R12,R12;sub R13,R13,R13;   //initializationsub R14,R14,R14;sub R15,R15,R15;sub R16,R16,R16;sub R17,R17,R17;   //initializationsub R18 R18 R18;sub R19,R19,R19;-----------------load cipher text A------------------------lw R1,1(R0);  //R1=Mem4[1+0]  R1=A12 lw R2,5(R0);  //R2=B12-----------------load s[0]/s[1]--------------------------lw R3,33(R0);lw R4,37(R0);  //R4=s[1]--------------------------------------------------------addi R5,R0,13;  //R5=13 stores i=13subi R5,R5,1;   //R5=i--addi R6,R0,1;  //stores fixed value 1 R6=1shl R7, R5,3;  //R7=i<<3=2*i*4   tmp=s[2i]lw R8, 33(R7); //R8=Mem4[R7+33]=Mem4[129]   s[24]lw R9,37(R7); //R10=Mem4[R7+37]＝Mem4[133］  s[25]sub R10,R2,R9; //R10=B12-s[25]; andi R11,R1,0x1F; //R11 get last 5 digt 0f A12 (A11..)beq R11,R0,3;     //if(R11==0) go to branch 3shr R10, R10,1;   //R10>>1subi R11,R11,1;  //R11--; A12--bne R11,R0,-3;   //if(R11!=0) go to addr -3--------------------xor-A12-------------------------------- nor R12,R10,R0;   //R12=!(R10)=!( B12-s[25]>>>)nor R13,R1,R0;   //R13=!A12 (!A11...)and R14,R1,R12;   //R14=A12&R12and R15,R13,R10;or R2,R14,R15;    //R2=X xor A12=B11 (B10...)-------------------sub&>>>-------------------------------sub R10,R1,R8;    //R10=A12-s[24]andi R11,R2,0x1F  //R11 get last 5 digit of B11beq R11,R0,3;    //if(R11==0) go to 3shr R10,R10,1;   //R10>>1subi R11,R11,1;  //R11--;B11--bne R11,R0,-3;  //if(R11!=0) go to addr －3--------------------xor-B11-------------------------nor R12,R10,R0;  //R12=!R10nor R16,R2,R0;  //R16=!B11／／改到这里！and R14,R10,R16;  //R14=R10&!B11and R15,R12,R2;  //R15=!R10&R2or R1,R14,R15;  //R1=A11 (A10..)bne R5,R6, -28;  //if(R5!=1) go to i-------------get A&B----------------------------------sub R18,R2,R4;  //R18=B=B0-s[1] output Bsw R18, 13(R0);sub R19,R1,R3;  //R19=A=A0-s[0] output Asw R19, 9(R0);hal            //11111100000000000000000000000000