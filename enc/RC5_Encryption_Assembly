A = A + S[0];  A&B:plain text //A:32 bit  B:32 bit
B = B + S[1];
for i = 1 to 12 do  
	  A = ((A xor B) <<< B) + S[2×i];
	  B = ((B xor A) <<< A) + S[2×i + 1];


-------------------load A/B--------------------------
lw R1,1(R0);   //R1=Mem[1]|Mem[2]|Mem[3]|Mem[4]--plaintext A
lw R2, 5(R0);    //R2==Mem[5]|Mem[6]|Mem[7]|Mem[8] --load plaintext B

------------------load s[0]/s[1]----------------------------
lw R3, 33(R0);  //R5=Mem4[$0+33]  
lw R4, 37(R0);  //R5=Mem5[$0+37]


-------------Initialization Add----------------------------
add R5,R1,R3;   //R5＝A0=A+s[0]
add R6,R2,R4;   //R6=B0=B+s[1]    
--------------Loop-----------------------------------------
//for i = 1 to 12 do  
	  A1 = ((A0 xor B0) <<< B0) + S[2×i];
	  B1 = ((B0 xor A1) <<< A1) + S[2×i + 1];
	  ...
//i=1 to 12

addi R7,R0,0;  //R10=$0 //R10 stores counter i, i=0
addi R7,R7,1;  //i=i+1=1
addi R8,R0,12;  //fixed value  R8=12
nor R9,R5,R0;   // R9=!R5  R9=!A0 
nor R10,R6,R0;   // R10=!B0

and R11,R5,R10;  //R11=A0&!B0
and R12,R9,R6;  //R12=!A0&B0
or R13,R11,R12; //R13=A0 xor B0

andi R14, R6, Ox1F;   //get last 5 digit of B0

beq R14, R0, 4Ish3;    //if (R14==0) PC=43  R14=Ox000B0
shl R13, R13, 1;     //R13<<1
subi R14,R14,1;      //R14=R14-1  B0=B0-1
bne R14, R0, 40;     //if(R14!==0) PC=40
shl R15,R7,3;   //R15=2*i*4=i*8;
lw R16,33(R15);  //R16=Mem4[R15+33]=Mem4[41]  tmp1=S[2]
add R17,R13,R16; //R17=R13+tmp1=A1








nor R9, R17,R0; //R9=!R17=!A1
and R11,R6,R9;  //R11=R6&R9=B0&!A1
and R12,R10,R17;  //R12=!B0&A1
or R13,R11,R12;   //R13=B0 xor A1
andi R14, R17, Ox1F;   //R14 gets last 5 digit of A1
beq R14, R0, 62;    //if (R14==0) PC=62  R14=Ox000A1
shl R13, R13, 1;     //R13<<1
subi R14,R14,1;      //R14=R14-1  A1=A1-1
bne R14, R0, 59;     //if(R14!==0) PC=59

lw R19,37(R15);  // R19=Mem[R15+37]=Mem4[i*2*4＋37]  tmp2
add R20,R13,R19;  // R20= B1

bne R7,R8,28;  //if(R7!=12) go to i++










